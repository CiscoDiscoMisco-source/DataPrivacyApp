"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/dataService.ts":
/*!*************************************!*\
  !*** ./src/services/dataService.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dataService: function() { return /* binding */ dataService; }\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ dataService,default auto */ // Sample company data\nconst COMPANIES = [\n    {\n        id: \"1\",\n        name: \"TechCorp\",\n        logo: \"/logos/techcorp.png\",\n        industry: \"Technology\",\n        description: \"A leading technology company specializing in cloud services.\",\n        dataSharingPolicies: [\n            {\n                id: \"101\",\n                dataType: \"Personal Info\",\n                purpose: \"Account Management\",\n                thirdParties: [\n                    \"CustomerService Co.\",\n                    \"CloudSecurity Inc.\"\n                ],\n                description: \"Basic personal information used for account management and security.\"\n            },\n            {\n                id: \"102\",\n                dataType: \"Usage Data\",\n                purpose: \"Analytics\",\n                thirdParties: [\n                    \"Analytics Pro\",\n                    \"DataInsight Ltd.\"\n                ],\n                description: \"Information about how you use our services.\"\n            },\n            {\n                id: \"103\",\n                dataType: \"Location\",\n                purpose: \"Service Localization\",\n                thirdParties: [\n                    \"LocalSearch Inc.\"\n                ],\n                description: \"Your location data to provide local services.\"\n            }\n        ]\n    },\n    {\n        id: \"2\",\n        name: \"FinanceHub\",\n        logo: \"/logos/financehub.png\",\n        industry: \"Finance\",\n        description: \"Financial services and banking solutions.\",\n        dataSharingPolicies: [\n            {\n                id: \"201\",\n                dataType: \"Personal Info\",\n                purpose: \"Identity Verification\",\n                thirdParties: [\n                    \"VerifyID Inc.\",\n                    \"SecureCheck Corp.\"\n                ],\n                description: \"Verifying your identity for security and regulatory compliance.\"\n            },\n            {\n                id: \"202\",\n                dataType: \"Financial Data\",\n                purpose: \"Transaction Processing\",\n                thirdParties: [\n                    \"PaymentProcess Ltd.\",\n                    \"CreditCheck Co.\"\n                ],\n                description: \"Processing your financial transactions and credit history.\"\n            },\n            {\n                id: \"203\",\n                dataType: \"Location\",\n                purpose: \"Fraud Detection\",\n                thirdParties: [\n                    \"FraudShield Inc.\"\n                ],\n                description: \"Detecting unusual activity patterns for your security.\"\n            }\n        ]\n    },\n    {\n        id: \"3\",\n        name: \"HealthPlus\",\n        logo: \"/logos/healthplus.png\",\n        industry: \"Healthcare\",\n        description: \"Healthcare services and wellness solutions.\",\n        dataSharingPolicies: [\n            {\n                id: \"301\",\n                dataType: \"Personal Info\",\n                purpose: \"Patient Registration\",\n                thirdParties: [\n                    \"MedicalRecords Inc.\"\n                ],\n                description: \"Managing your patient information for better service.\"\n            },\n            {\n                id: \"302\",\n                dataType: \"Health Data\",\n                purpose: \"Treatment\",\n                thirdParties: [\n                    \"SpecialistNet\",\n                    \"LabResults Ltd.\"\n                ],\n                description: \"Health information used for diagnosis and treatment.\"\n            },\n            {\n                id: \"303\",\n                dataType: \"Insurance Info\",\n                purpose: \"Billing\",\n                thirdParties: [\n                    \"InsuranceBilling Co.\"\n                ],\n                description: \"Insurance details for processing claims and payments.\"\n            }\n        ]\n    }\n];\n// Default preferences (all disallowed initially)\nconst defaultPreferences = [\n    // Global preferences\n    {\n        id: \"g1\",\n        dataType: \"Personal Info\",\n        allowed: false\n    },\n    {\n        id: \"g2\",\n        dataType: \"Usage Data\",\n        allowed: false\n    },\n    {\n        id: \"g3\",\n        dataType: \"Location\",\n        allowed: false\n    },\n    {\n        id: \"g4\",\n        dataType: \"Financial Data\",\n        allowed: false\n    },\n    {\n        id: \"g5\",\n        dataType: \"Health Data\",\n        allowed: false\n    },\n    {\n        id: \"g6\",\n        dataType: \"Insurance Info\",\n        allowed: false\n    }\n];\n// Local storage keys\nconst COMPANIES_KEY = \"data-privacy-companies\";\nconst PREFERENCES_KEY = \"data-privacy-preferences\";\nconst preferenceChangeListeners = [];\nconst dataService = {\n    // Get all companies\n    getCompanies: ()=>{\n        if (false) {}\n        const storedCompanies = localStorage.getItem(COMPANIES_KEY);\n        if (!storedCompanies) {\n            localStorage.setItem(COMPANIES_KEY, JSON.stringify(COMPANIES));\n            return COMPANIES;\n        }\n        return JSON.parse(storedCompanies);\n    },\n    // Get a specific company\n    getCompany: (id)=>{\n        const companies = dataService.getCompanies();\n        return companies.find((company)=>company.id === id);\n    },\n    // Get all preferences\n    getPreferences: ()=>{\n        if (false) {}\n        const storedPreferences = localStorage.getItem(PREFERENCES_KEY);\n        if (!storedPreferences) {\n            localStorage.setItem(PREFERENCES_KEY, JSON.stringify(defaultPreferences));\n            return defaultPreferences;\n        }\n        return JSON.parse(storedPreferences);\n    },\n    // Get global preferences\n    getGlobalPreferences: ()=>{\n        const preferences = dataService.getPreferences();\n        return preferences.filter((pref)=>!pref.companyId);\n    },\n    // Get company-specific preferences\n    getCompanyPreferences: (companyId)=>{\n        const preferences = dataService.getPreferences();\n        return preferences.filter((pref)=>pref.companyId === companyId);\n    },\n    // Save a preference\n    savePreference: (preference)=>{\n        if (false) {}\n        const preferences = dataService.getPreferences();\n        // Find if preference already exists\n        const index = preferences.findIndex((p)=>p.dataType === preference.dataType && p.companyId === preference.companyId);\n        if (index >= 0) {\n            // Update existing preference\n            preferences[index] = preference;\n        } else {\n            // Add new preference\n            preferences.push(preference);\n        }\n        // Save to localStorage\n        localStorage.setItem(PREFERENCES_KEY, JSON.stringify(preferences));\n        // Notify listeners\n        dataService.notifyPreferenceChange();\n    },\n    // Clone preferences from one company to another\n    clonePreferences: (sourceCompanyId, targetCompanyId)=>{\n        if (false) {}\n        const preferences = dataService.getPreferences();\n        const sourcePreferences = preferences.filter((pref)=>pref.companyId === sourceCompanyId);\n        // Get target company to ensure we clone only relevant data types\n        const targetCompany = dataService.getCompany(targetCompanyId);\n        if (!targetCompany) return;\n        // Get the list of data types actually used by the target company\n        const targetCompanyDataTypes = targetCompany.dataSharingPolicies.map((policy)=>policy.dataType);\n        if (sourcePreferences.length === 0) {\n            // If no source preferences found, check if we should use global preferences\n            const globalPrefs = preferences.filter((pref)=>!pref.companyId);\n            if (globalPrefs.length > 0) {\n                // Create new preferences for target company based on global preferences\n                // But only for data types that are actually used by the target company\n                const targetPreferences = globalPrefs.filter((pref)=>targetCompanyDataTypes.includes(pref.dataType)).map((pref)=>({\n                        id: \"\".concat(targetCompanyId, \"-\").concat(pref.dataType.replace(/\\s+/g, \"-\").toLowerCase()),\n                        dataType: pref.dataType,\n                        allowed: pref.allowed,\n                        companyId: targetCompanyId\n                    }));\n                // Remove any existing preferences for the target company\n                const filteredPreferences = preferences.filter((pref)=>pref.companyId !== targetCompanyId);\n                // Add new preferences\n                const updatedPreferences = [\n                    ...filteredPreferences,\n                    ...targetPreferences\n                ];\n                // Save to localStorage\n                localStorage.setItem(PREFERENCES_KEY, JSON.stringify(updatedPreferences));\n                // Notify listeners\n                dataService.notifyPreferenceChange();\n            }\n            return;\n        }\n        // Create a map of source preferences for quick lookup\n        const sourcePrefsMap = new Map();\n        sourcePreferences.forEach((pref)=>{\n            sourcePrefsMap.set(pref.dataType, pref);\n        });\n        // Create new preferences for target company, but only for data types they use\n        const targetPreferences = [];\n        // Ensure we create a preference for each data type in the target company\n        targetCompany.dataSharingPolicies.forEach((policy)=>{\n            const sourcePref = sourcePrefsMap.get(policy.dataType);\n            // Use the source preference if available, otherwise use global preference\n            const globalPref = preferences.find((p)=>p.dataType === policy.dataType && !p.companyId);\n            const allowed = sourcePref ? sourcePref.allowed : globalPref ? globalPref.allowed : false;\n            targetPreferences.push({\n                id: \"\".concat(targetCompanyId, \"-\").concat(policy.dataType.replace(/\\s+/g, \"-\").toLowerCase()),\n                dataType: policy.dataType,\n                allowed: allowed,\n                companyId: targetCompanyId\n            });\n        });\n        // Remove any existing preferences for the target company\n        const filteredPreferences = preferences.filter((pref)=>pref.companyId !== targetCompanyId);\n        // Add new preferences\n        const updatedPreferences = [\n            ...filteredPreferences,\n            ...targetPreferences\n        ];\n        // Save to localStorage\n        localStorage.setItem(PREFERENCES_KEY, JSON.stringify(updatedPreferences));\n        // Notify listeners\n        dataService.notifyPreferenceChange();\n    },\n    // Get effective preference (taking into account global and company-specific)\n    getEffectivePreference: (dataType, companyId)=>{\n        const preferences = dataService.getPreferences();\n        // Check for company-specific preference\n        const companyPref = preferences.find((p)=>p.dataType === dataType && p.companyId === companyId);\n        if (companyPref) {\n            return companyPref.allowed;\n        }\n        // Fall back to global preference\n        const globalPref = preferences.find((p)=>p.dataType === dataType && !p.companyId);\n        return globalPref ? globalPref.allowed : false;\n    },\n    // Subscribe to preference changes\n    subscribeToPreferenceChanges: (listener)=>{\n        preferenceChangeListeners.push(listener);\n        // Return unsubscribe function\n        return ()=>{\n            const index = preferenceChangeListeners.indexOf(listener);\n            if (index > -1) {\n                preferenceChangeListeners.splice(index, 1);\n            }\n        };\n    },\n    // Notify all listeners of preference changes\n    notifyPreferenceChange: ()=>{\n        preferenceChangeListeners.forEach((listener)=>listener());\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (dataService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/dataService.ts\n"));

/***/ })

});