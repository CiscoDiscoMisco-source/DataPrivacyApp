# Data Privacy App Schema
# This schema uses Cognito User Pools for authorized access along with API key for public access

# User model linked to Cognito user pool
type User @model
  @auth(rules: [
    { allow: owner },
    { allow: private, provider: userPools, operations: [read] }
  ]) {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  birthdate: String
  nationalId: String
  isActive: Boolean!
  isAdmin: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  companies: [Company] @hasMany(indexName: "byUser", fields: ["id"])
  preferences: UserPreferences @hasOne
}

# TokenPackage model
type TokenPackage @model
  @auth(rules: [
    { allow: private, provider: userPools, operations: [read] },
    { allow: owner, operations: [create, update, delete] }
  ]) {
  id: ID!
  name: String!
  amount: Int!
  price: Float!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Company model
type Company @model
  @auth(rules: [
    { allow: owner },
    { allow: private, provider: userPools, operations: [read] },
    { allow: public, provider: apiKey, operations: [read] }
  ]) {
  id: ID!
  name: String!
  description: String
  website: String
  industry: String
  sizeRange: String
  country: String
  state: String
  city: String
  address: String
  postalCode: String
  phone: String
  isActive: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  userId: ID!
  user: User @belongsTo(fields: ["userId"])
  dataTypes: [DataType] @hasMany(indexName: "byCompany", fields: ["id"])
}

# DataType model
type DataType @model
  @auth(rules: [
    { allow: owner },
    { allow: private, provider: userPools, operations: [read] },
    { allow: public, provider: apiKey, operations: [read] }
  ]) {
  id: ID!
  name: String!
  description: String
  category: String!
  isSensitive: Boolean!
  retentionPeriod: Int
  isRequired: Boolean!
  validationRules: String
  isActive: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  companyId: ID!
  company: Company @belongsTo(fields: ["companyId"])
  dataSharingTerms: [DataSharingTerm] @hasMany(indexName: "byDataType", fields: ["id"])
}

# DataSharingTerm model
type DataSharingTerm @model
  @auth(rules: [
    { allow: owner },
    { allow: private, provider: userPools, operations: [read] }
  ]) {
  id: ID!
  purpose: String!
  duration: Int
  conditions: String
  status: String!
  startDate: AWSDateTime
  endDate: AWSDateTime
  terminationReason: String
  isActive: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  companyId: ID!
  company: Company @belongsTo(fields: ["companyId"])
  dataTypeId: ID!
  dataType: DataType @belongsTo(fields: ["dataTypeId"])
  sharedById: ID!
  sharedWithId: ID!
}

# UserPreferences model
type UserPreferences @model
  @auth(rules: [
    { allow: owner },
    { allow: private, provider: userPools, operations: [read] }
  ]) {
  id: ID!
  emailNotifications: Boolean!
  notificationFrequency: String!
  notificationTypes: String
  dataSharingPreferences: String
  privacyLevel: String!
  theme: String!
  language: String!
  timezone: String
  dataRetentionPeriod: Int
  autoDeleteData: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  userId: ID!
  user: User @belongsTo(fields: ["userId"])
}

# Enums
enum DataCategory {
  PERSONAL
  CONTACT
  FINANCIAL
  HEALTH
  LOCATION
  BEHAVIORAL
  TECHNICAL
  OTHER
}

enum SharingStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  TERMINATED
}

enum NotificationFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY
  NEVER
}
